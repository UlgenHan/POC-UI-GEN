type Action =
  | { type: 'navigate'; to: string }
  | { type: 'apiCall'; service: string; method: string; args?: any }
  | { type: 'updateState'; changes: Record<string, any> };

type Ctx = { setLocalState: (fn: (prev: Record<string, any>) => Record<string, any>) => void };

export class EventManager {
  constructor(private ctx: Ctx) {}

  async dispatch(action: Action) {
    switch (action.type) {
      case 'navigate':
        if (typeof window !== 'undefined') {
          window.location.href = action.to;
        }
        break;
      case 'apiCall': {
        const svc = (await import(`../services/${action.service}Service`)) as any;
        const fn = svc[`${action.service}Service`]?.[action.method];
        const res = await fn?.(action.args);
        // naive success reporting
        console.log('apiCall result', res);
        return res;
      }
      case 'updateState':
        this.ctx.setLocalState((prev) => ({ ...prev, ...action.changes }));
        break;
    }
  }
}

